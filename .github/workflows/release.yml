name: Release Application

on:
  push:
    paths:
      - 'VERSION'  # Trigger on VERSION file changes
    branches:
      - main
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write

jobs:
  # ========================================
  # Prepare release info
  # ========================================
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      tag_name: ${{ steps.read_version.outputs.tag_name }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📖 Read VERSION file
        id: read_version
        run: |
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔄 Sync version to all files
        run: node scripts/update-version.cjs

      - name: 🔒 Sync package-lock.json with package.json
        run: |
          npm install --package-lock-only
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json package-lock.json src-tauri/Cargo.toml src-tauri/tauri.conf.json README.md
          git diff --staged --quiet || git commit -m "chore: sync version ${{ steps.read_version.outputs.version }} and lockfile"
          git push

      - name: 🏷️ Create Git tag
        run: |
          git tag ${{ steps.read_version.outputs.tag_name }} || echo "Tag already exists"
          git push origin ${{ steps.read_version.outputs.tag_name }} || echo "Tag already pushed"

  # ========================================
  # Build and release for all platforms
  # ========================================
  build-and-release:
    name: Build ${{ matrix.name }}
    needs: prepare

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            ffmpeg_extract_cmd: |
              curl.exe -L -o ffmpeg.zip "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
              7z x -y ffmpeg.zip | Out-Null
              New-Item -ItemType Directory -Path "src-tauri\binaries" -Force | Out-Null
              Move-Item "ffmpeg-master-latest-win64-gpl\bin\ffmpeg.exe" "src-tauri\binaries\ffmpeg-x86_64-pc-windows-msvc.exe" -Force
              Move-Item "ffmpeg-master-latest-win64-gpl\bin\ffprobe.exe" "src-tauri\binaries\ffprobe-x86_64-pc-windows-msvc.exe" -Force
              New-Item -ItemType Directory -Path "ffmpeg-standalone" -Force | Out-Null
              Copy-Item "src-tauri\binaries\ffmpeg-x86_64-pc-windows-msvc.exe" "ffmpeg-standalone\ffmpeg.exe" -Force
              Copy-Item "src-tauri\binaries\ffprobe-x86_64-pc-windows-msvc.exe" "ffmpeg-standalone\ffprobe.exe" -Force
              Copy-Item "ffmpeg-master-latest-win64-gpl\LICENSE.txt" "ffmpeg-standalone\LICENSE-FFmpeg.txt" -Force
              Push-Location "ffmpeg-standalone"; 7z a -tzip "..\ffmpeg-windows-x64.zip" * | Out-Null; Pop-Location
            bundle_pattern: "src-tauri/target/$target/release/bundle/**/*.{msi,exe}"

          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: Linux x64
            ffmpeg_extract_cmd: |
              curl -L -o ffmpeg-release-amd64-static.tar.xz "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
              tar -xf ffmpeg-release-amd64-static.tar.xz
              FFMPEG_DIR=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)
              mkdir -p src-tauri/binaries
              mv "$FFMPEG_DIR/ffmpeg" src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
              mv "$FFMPEG_DIR/ffprobe" src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
              chmod +x src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
              chmod +x src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu ffmpeg-standalone/ffprobe
              cp "$FFMPEG_DIR/GPLv3.txt" ffmpeg-standalone/LICENSE-FFmpeg.txt
              tar -czf ffmpeg-linux-x64.tar.gz -C ffmpeg-standalone .
            bundle_pattern: "src-tauri/target/$target/release/bundle/**/*.{AppImage,deb,rpm}"

          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macOS Intel
            ffmpeg_extract_cmd: |
              curl -L -o ffmpeg-macos.zip https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
              curl -L -o ffprobe-macos.zip https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
              unzip -q ffmpeg-macos.zip
              unzip -q ffprobe-macos.zip
              mkdir -p src-tauri/binaries
              mv ffmpeg src-tauri/binaries/ffmpeg-x86_64-apple-darwin
              mv ffprobe src-tauri/binaries/ffprobe-x86_64-apple-darwin
              chmod +x src-tauri/binaries/ffmpeg-x86_64-apple-darwin
              chmod +x src-tauri/binaries/ffprobe-x86_64-apple-darwin
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-x86_64-apple-darwin ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-x86_64-apple-darwin ffmpeg-standalone/ffprobe
              echo "FFmpeg GPL v2 / LGPL v2.1. Source: https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
              zip -r -q ffmpeg-macos-intel-x64.zip ffmpeg-standalone/
            bundle_pattern: "src-tauri/target/$target/release/bundle/dmg/*.dmg"

          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macOS Apple Silicon
            ffmpeg_extract_cmd: |
              curl -L -o ffmpeg-macos-arm.zip "https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip?arch=arm64"
              curl -L -o ffprobe-macos-arm.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip?arch=arm64"
              unzip -q ffmpeg-macos-arm.zip
              unzip -q ffprobe-macos-arm.zip
              mkdir -p src-tauri/binaries
              mv ffmpeg src-tauri/binaries/ffmpeg-aarch64-apple-darwin
              mv ffprobe src-tauri/binaries/ffprobe-aarch64-apple-darwin
              chmod +x src-tauri/binaries/ffmpeg-aarch64-apple-darwin
              chmod +x src-tauri/binaries/ffprobe-aarch64-apple-darwin
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-aarch64-apple-darwin ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-aarch64-apple-darwin ffmpeg-standalone/ffprobe
              echo "FFmpeg GPL v2 / LGPL v2.1. Source: https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
              zip -r -q ffmpeg-macos-arm64.zip ffmpeg-standalone/
            bundle_pattern: "src-tauri/target/$target/release/bundle/dmg/*.dmg"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we have latest commit with synced versions

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: 🔧 Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 📁 Create binaries directory (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          New-Item -ItemType Directory -Path "src-tauri\binaries" -Force | Out-Null
        shell: pwsh

      - name: 📁 Create binaries directory (Unix)
        if: matrix.platform != 'windows-latest'
        run: mkdir -p src-tauri/binaries

      - name: 📥 Download and extract FFmpeg
        run: ${{ matrix.ffmpeg_extract_cmd }}

      - name: 🔐 Set executable permissions (Unix)
        if: matrix.platform != 'windows-latest'
        run: chmod +x src-tauri/binaries/*

      - name: 📦 Install npm dependencies
        run: npm ci

      - name: 🏗️ Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.prepare.outputs.tag_name }}
          releaseName: "MuXolotl-Converter v${{ needs.prepare.outputs.version }}"
          releaseBody: |
            ## 🦎 MuXolotl-Converter v${{ needs.prepare.outputs.version }}

            **High-Performance Cross-Platform Audio & Video Converter**

            ### 📦 Installation

            Download the appropriate installer for your platform:

            #### Windows
            - **Recommended**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64_en-US.msi`
            - **Portable**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64.exe`

            #### macOS
            - **Intel (x64)**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64.dmg`
            - **Apple Silicon**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_aarch64.dmg`

            #### Linux
            - **AppImage**: `muxolotl-converter_${{ needs.prepare.outputs.version }}_amd64.AppImage`
            - **Debian/Ubuntu**: `muxolotl-converter_${{ needs.prepare.outputs.version }}_amd64.deb`
            - **Fedora/RHEL**: `muxolotl-converter-${{ needs.prepare.outputs.version }}-1.x86_64.rpm`

            ### 🛠️ FFmpeg Binaries (Standalone)
            - `ffmpeg-windows-x64.zip` (Windows)
            - `ffmpeg-macos-intel-x64.zip` (macOS Intel)
            - `ffmpeg-macos-arm64.zip` (macOS Apple Silicon)
            - `ffmpeg-linux-x64.tar.gz` (Linux)

            License: FFmpeg is licensed under GPL v2 / LGPL v2.1
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}

      - name: 📤 Upload FFmpeg standalone package to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          files: |
            ffmpeg-*.zip
            ffmpeg-*.tar.gz
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}