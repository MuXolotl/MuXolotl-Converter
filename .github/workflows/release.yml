name: Release Application

on:
  push:
    paths:
      - 'VERSION'  # Trigger on VERSION file changes
    branches:
      - main
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write

jobs:
  # ========================================
  # Prepare release info
  # ========================================
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      tag_name: ${{ steps.read_version.outputs.tag_name }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìñ Read VERSION file
        id: read_version
        run: |
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üîÑ Sync version to all files
        run: node scripts/update-version.js

      - name: üíæ Commit synchronized files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json README.md
          git diff --staged --quiet || git commit -m "chore: sync version ${{ steps.read_version.outputs.version }} to all files"
          git push

      - name: üè∑Ô∏è Create Git tag
        run: |
          git tag ${{ steps.read_version.outputs.tag_name }} || echo "Tag already exists"
          git push origin ${{ steps.read_version.outputs.tag_name }} || echo "Tag already pushed"

  # ========================================
  # Build and release for all platforms
  # ========================================
  build-and-release:
    name: Build ${{ matrix.name }}
    needs: prepare
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            ffmpeg_url: https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip
            ffmpeg_archive: ffmpeg-master-latest-win64-gpl.zip
            ffmpeg_extract_cmd: |
              unzip -q ffmpeg-master-latest-win64-gpl.zip
              mv ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe src-tauri/binaries/ffmpeg-x86_64-pc-windows-msvc.exe
              mv ffmpeg-master-latest-win64-gpl/bin/ffprobe.exe src-tauri/binaries/ffprobe-x86_64-pc-windows-msvc.exe
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-x86_64-pc-windows-msvc.exe ffmpeg-standalone/ffmpeg.exe
              cp src-tauri/binaries/ffprobe-x86_64-pc-windows-msvc.exe ffmpeg-standalone/ffprobe.exe
              cp ffmpeg-master-latest-win64-gpl/LICENSE.txt ffmpeg-standalone/LICENSE-FFmpeg.txt
              cd ffmpeg-standalone && 7z a -tzip ../ffmpeg-windows-x64.zip * && cd ..
            bundle_pattern: "src-tauri/target/$target/release/bundle/**/*.{msi,exe}"

          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: Linux x64
            ffmpeg_url: https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
            ffmpeg_archive: ffmpeg-release-amd64-static.tar.xz
            ffmpeg_extract_cmd: |
              tar -xf ffmpeg-release-amd64-static.tar.xz
              FFMPEG_DIR=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)
              mv "$FFMPEG_DIR/ffmpeg" src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
              mv "$FFMPEG_DIR/ffprobe" src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
              chmod +x src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
              chmod +x src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu ffmpeg-standalone/ffprobe
              cp "$FFMPEG_DIR/GPLv3.txt" ffmpeg-standalone/LICENSE-FFmpeg.txt
              tar -czf ffmpeg-linux-x64.tar.gz -C ffmpeg-standalone .
            bundle_pattern: "src-tauri/target/$target/release/bundle/**/*.{AppImage,deb,rpm}"

          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macOS Intel
            ffmpeg_url_1: https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
            ffmpeg_url_2: https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
            ffmpeg_extract_cmd: |
              curl -L -o ffmpeg-macos.zip https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
              curl -L -o ffprobe-macos.zip https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
              unzip -q ffmpeg-macos.zip
              unzip -q ffprobe-macos.zip
              mv ffmpeg src-tauri/binaries/ffmpeg-x86_64-apple-darwin
              mv ffprobe src-tauri/binaries/ffprobe-x86_64-apple-darwin
              chmod +x src-tauri/binaries/ffmpeg-x86_64-apple-darwin
              chmod +x src-tauri/binaries/ffprobe-x86_64-apple-darwin
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-x86_64-apple-darwin ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-x86_64-apple-darwin ffmpeg-standalone/ffprobe
              echo "FFmpeg GPL v2 / LGPL v2.1. Source: https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
              zip -r -q ffmpeg-macos-intel-x64.zip ffmpeg-standalone/
            bundle_pattern: "src-tauri/target/$target/release/bundle/dmg/*.dmg"

          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macOS Apple Silicon
            ffmpeg_extract_cmd: |
              curl -L -o ffmpeg-macos-arm.zip "https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip?arch=arm64"
              curl -L -o ffprobe-macos-arm.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip?arch=arm64"
              unzip -q ffmpeg-macos-arm.zip
              unzip -q ffprobe-macos-arm.zip
              mv ffmpeg src-tauri/binaries/ffmpeg-aarch64-apple-darwin
              mv ffprobe src-tauri/binaries/ffprobe-aarch64-apple-darwin
              chmod +x src-tauri/binaries/ffmpeg-aarch64-apple-darwin
              chmod +x src-tauri/binaries/ffprobe-aarch64-apple-darwin
              mkdir -p ffmpeg-standalone
              cp src-tauri/binaries/ffmpeg-aarch64-apple-darwin ffmpeg-standalone/ffmpeg
              cp src-tauri/binaries/ffprobe-aarch64-apple-darwin ffmpeg-standalone/ffprobe
              echo "FFmpeg GPL v2 / LGPL v2.1. Source: https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
              zip -r -q ffmpeg-macos-arm64.zip ffmpeg-standalone/
            bundle_pattern: "src-tauri/target/$target/release/bundle/dmg/*.dmg"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we have latest commit with synced versions

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: üîß Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: üìÅ Create binaries directory
        run: mkdir -p src-tauri/binaries

      - name: üì• Download and extract FFmpeg
        run: ${{ matrix.ffmpeg_extract_cmd }}

      - name: üîê Set executable permissions (Unix)
        if: matrix.platform != 'windows-latest'
        run: chmod +x src-tauri/binaries/*

      - name: üì¶ Install npm dependencies
        run: npm ci

      - name: üèóÔ∏è Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.prepare.outputs.tag_name }}
          releaseName: "MuXolotl-Converter v${{ needs.prepare.outputs.version }}"
          releaseBody: |
            ## ü¶é MuXolotl-Converter v${{ needs.prepare.outputs.version }}
            
            **High-Performance Cross-Platform Audio & Video Converter**
            
            ### üì¶ Installation
            
            Download the appropriate installer for your platform:
            
            #### Windows
            - **Recommended**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64_en-US.msi` (installer)
            - **Portable**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64.exe` (no installation required)
            
            #### macOS
            - **Intel (x64)**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_x64.dmg`
            - **Apple Silicon (M1/M2/M3)**: `MuXolotl-Converter_${{ needs.prepare.outputs.version }}_aarch64.dmg`
            
            > ‚ö†Ô∏è **macOS Security**: Right-click ‚Üí Open for first launch (Gatekeeper bypass)
            
            #### Linux
            - **AppImage** (universal): `muxolotl-converter_${{ needs.prepare.outputs.version }}_amd64.AppImage`
            - **Debian/Ubuntu**: `muxolotl-converter_${{ needs.prepare.outputs.version }}_amd64.deb`
            - **Fedora/RHEL**: `muxolotl-converter-${{ needs.prepare.outputs.version }}-1.x86_64.rpm`
            
            ```bash
            # Make AppImage executable
            chmod +x muxolotl-converter_*.AppImage
            ./muxolotl-converter_*.AppImage
            ```
            
            ---
            
            ### ‚ú® Key Features
            
            - üöÄ **GPU Acceleration** - NVIDIA NVENC, Intel QSV, AMD AMF, Apple VideoToolbox
            - üéØ **40+ Formats** - Audio: MP3, FLAC, AAC, Opus, WAV... | Video: MP4, MKV, WebM, AVI...
            - ‚ö° **Parallel Processing** - Convert up to 4 files simultaneously
            - üíæ **Queue Persistence** - Resume work after closing the app
            - üé® **Modern UI** - Beautiful glass-morphism design
            - üîß **Advanced Controls** - Bitrate, resolution, FPS, sample rate, channels
            - üìä **Real-time Progress** - Live FPS, speed, and ETA tracking
            
            ---
            
            ### üõ†Ô∏è FFmpeg Binaries (Standalone)
            
            Pre-built FFmpeg binaries are also available as standalone packages:
            
            - `ffmpeg-windows-x64.zip` - Windows (static build)
            - `ffmpeg-macos-intel-x64.zip` - macOS Intel
            - `ffmpeg-macos-arm64.zip` - macOS Apple Silicon
            - `ffmpeg-linux-x64.tar.gz` - Linux (static build)
            
            **License**: FFmpeg is licensed under [GPL v2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html) / [LGPL v2.1](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html)
            
            **Sources**:
            - Windows/Linux: [BtbN/FFmpeg-Builds](https://github.com/BtbN/FFmpeg-Builds) / [johnvansickle.com](https://johnvansickle.com/ffmpeg/)
            - macOS: [evermeet.cx/ffmpeg](https://evermeet.cx/ffmpeg/)
            
            ---
            
            ### üìã System Requirements
            
            **Minimum**:
            - Windows 10+, macOS 10.15+, Linux (64-bit)
            - 4 GB RAM
            - 200 MB storage
            
            **Recommended for GPU Acceleration**:
            - NVIDIA GTX 600+ / Intel HD 4000+ / AMD Radeon HD 7000+ / Apple M1+
            
            ---
            
            ### üêõ Known Issues
            
            - Maximum 50 files per queue
            - Conversions timeout after 1 hour
            - Some legacy formats (SHN, RA, RM) may fail
            
            ---
            
            ### üìñ Documentation
            
            - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
            - [Report Bug](https://github.com/${{ github.repository }}/issues)
            - [Request Feature](https://github.com/${{ github.repository }}/issues)
            
            ---
            
            ### üìÑ License
            
            Dual-licensed: [GPL v2](https://github.com/${{ github.repository }}/blob/main/LICENSE.GPL) / [LGPL v2.1](https://github.com/${{ github.repository }}/blob/main/LICENSE.LGPL)
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}

      - name: üì§ Upload FFmpeg standalone package to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          files: |
            ffmpeg-*.zip
            ffmpeg-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}