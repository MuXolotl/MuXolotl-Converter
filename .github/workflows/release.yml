name: Release Application

on:
  push:
    paths:
      - 'VERSION'
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      tag_name: ${{ steps.read_version.outputs.tag_name }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📖 Read VERSION file
        id: read_version
        run: |
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔄 Sync version to all files
        run: node scripts/update-version.cjs

      - name: 💾 Commit synchronized files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json src-tauri/Cargo.toml src-tauri/tauri.conf.json README.md
          git diff --staged --quiet || git commit -m "chore: sync version ${{ steps.read_version.outputs.version }} to all files"
          git push

      - name: 🏷️ Create Git tag
        run: |
          git tag ${{ steps.read_version.outputs.tag_name }} || echo "Tag already exists"
          git push origin ${{ steps.read_version.outputs.tag_name }} || echo "Tag already pushed"

  build-and-release:
    name: Build ${{ matrix.name }}
    needs: prepare
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            bundles: "msi,nsis"

          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: Linux x64
            bundles: "deb"

          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macOS Intel
            bundles: "dmg"

          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macOS Apple Silicon
            bundles: "dmg"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔧 Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: 📁 Create binaries directory
        run: mkdir -p src-tauri/binaries
        shell: bash

      - name: 📥 Download and setup FFmpeg (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          curl -L -o ffmpeg-temp.zip https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip
          unzip -q ffmpeg-temp.zip
          mv ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe src-tauri/binaries/ffmpeg-x86_64-pc-windows-msvc.exe
          mv ffmpeg-master-latest-win64-gpl/bin/ffprobe.exe src-tauri/binaries/ffprobe-x86_64-pc-windows-msvc.exe
          
          # Standalone package
          mkdir -p ffmpeg-standalone
          cp src-tauri/binaries/ffmpeg-x86_64-pc-windows-msvc.exe ffmpeg-standalone/ffmpeg.exe
          cp src-tauri/binaries/ffprobe-x86_64-pc-windows-msvc.exe ffmpeg-standalone/ffprobe.exe
          cp ffmpeg-master-latest-win64-gpl/LICENSE.txt ffmpeg-standalone/LICENSE-FFmpeg.txt
          cd ffmpeg-standalone && 7z a -tzip ../ffmpeg-windows-x64.zip * && cd ..
          
          # Cleanup
          rm -rf ffmpeg-master-latest-win64-gpl ffmpeg-temp.zip

      - name: 📥 Download and setup FFmpeg (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          curl -L -o ffmpeg-temp.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar -xf ffmpeg-temp.tar.xz
          FFMPEG_DIR=$(find . -maxdepth 1 -type d -name "ffmpeg-*-amd64-static" | head -n 1)
          
          mv "$FFMPEG_DIR/ffmpeg" src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
          mv "$FFMPEG_DIR/ffprobe" src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
          chmod +x src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu
          chmod +x src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu
          
          # Standalone package
          mkdir -p ffmpeg-standalone
          cp src-tauri/binaries/ffmpeg-x86_64-unknown-linux-gnu ffmpeg-standalone/ffmpeg
          cp src-tauri/binaries/ffprobe-x86_64-unknown-linux-gnu ffmpeg-standalone/ffprobe
          cp "$FFMPEG_DIR/GPLv3.txt" ffmpeg-standalone/LICENSE-FFmpeg.txt
          tar -czf ffmpeg-linux-x64.tar.gz -C ffmpeg-standalone .
          
          # Cleanup
          rm -rf "$FFMPEG_DIR" ffmpeg-temp.tar.xz

      - name: 📥 Download and setup FFmpeg (macOS Intel)
        if: matrix.platform == 'macos-latest' && matrix.target == 'x86_64-apple-darwin'
        run: |
          curl -L -o ffmpeg-temp.zip https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip
          curl -L -o ffprobe-temp.zip https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip
          unzip -q ffmpeg-temp.zip
          unzip -q ffprobe-temp.zip
          
          mv ffmpeg src-tauri/binaries/ffmpeg-x86_64-apple-darwin
          mv ffprobe src-tauri/binaries/ffprobe-x86_64-apple-darwin
          chmod +x src-tauri/binaries/ffmpeg-x86_64-apple-darwin
          chmod +x src-tauri/binaries/ffprobe-x86_64-apple-darwin
          
          # Standalone package
          mkdir -p ffmpeg-standalone
          cp src-tauri/binaries/ffmpeg-x86_64-apple-darwin ffmpeg-standalone/ffmpeg
          cp src-tauri/binaries/ffprobe-x86_64-apple-darwin ffmpeg-standalone/ffprobe
          echo "FFmpeg GPL v2 / LGPL v2.1 - https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
          cd ffmpeg-standalone && zip -r -q ../ffmpeg-macos-intel.zip . && cd ..
          
          # Cleanup
          rm -f ffmpeg-temp.zip ffprobe-temp.zip

      - name: 📥 Download and setup FFmpeg (macOS ARM)
        if: matrix.platform == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
        run: |
          curl -L -o ffmpeg-temp.zip "https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip?arch=arm64"
          curl -L -o ffprobe-temp.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip?arch=arm64"
          unzip -q ffmpeg-temp.zip
          unzip -q ffprobe-temp.zip
          
          mv ffmpeg src-tauri/binaries/ffmpeg-aarch64-apple-darwin
          mv ffprobe src-tauri/binaries/ffprobe-aarch64-apple-darwin
          chmod +x src-tauri/binaries/ffmpeg-aarch64-apple-darwin
          chmod +x src-tauri/binaries/ffprobe-aarch64-apple-darwin
          
          # Standalone package
          mkdir -p ffmpeg-standalone
          cp src-tauri/binaries/ffmpeg-aarch64-apple-darwin ffmpeg-standalone/ffmpeg
          cp src-tauri/binaries/ffprobe-aarch64-apple-darwin ffmpeg-standalone/ffprobe
          echo "FFmpeg GPL v2 / LGPL v2.1 - https://evermeet.cx/ffmpeg/" > ffmpeg-standalone/LICENSE-FFmpeg.txt
          cd ffmpeg-standalone && zip -r -q ../ffmpeg-macos-arm64.zip . && cd ..
          
          # Cleanup
          rm -f ffmpeg-temp.zip ffprobe-temp.zip

      - name: 📦 Install npm dependencies
        run: npm ci

      - name: 🏗️ Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.prepare.outputs.tag_name }}
          releaseName: "MuXolotl Converter v${{ needs.prepare.outputs.version }}"
          releaseBody: |
            # 🦎 MuXolotl Converter v${{ needs.prepare.outputs.version }}

            **High-Performance Audio & Video Converter**

            ---

            ## 📦 Downloads

            ### 🪟 Windows
            - [**MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-setup.msi**](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-setup.msi) - Installer (Recommended)
            - [**MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-portable.exe**](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-portable.exe) - Portable

            ### 🍎 macOS
            - [**MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-intel.dmg**](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-intel.dmg) - Intel (x64)
            - [**MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-apple-silicon.dmg**](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-apple-silicon.dmg) - Apple Silicon (M1/M2/M3)

            ### 🐧 Linux
            - [**MuXolotl-Converter-${{ needs.prepare.outputs.version }}-linux-x64.deb**](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-linux-x64.deb) - Debian/Ubuntu

            ### 🛠️ FFmpeg Binaries
            - [ffmpeg-windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/ffmpeg-windows-x64.zip)
            - [ffmpeg-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/ffmpeg-linux-x64.tar.gz)
            - [ffmpeg-macos-intel.zip](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/ffmpeg-macos-intel.zip)
            - [ffmpeg-macos-arm64.zip](https://github.com/${{ github.repository }}/releases/download/v${{ needs.prepare.outputs.version }}/ffmpeg-macos-arm64.zip)

            ---

            ## ✨ Features

            - ⚡ **GPU Acceleration** - NVIDIA, Intel, AMD, Apple Silicon
            - 🎯 **40+ Formats** - Audio (MP3, FLAC, AAC, Opus...) & Video (MP4, MKV, WebM...)
            - 🔄 **Batch Processing** - Convert up to 50 files simultaneously
            - 💾 **Persistent Queue** - Resume conversions anytime
            - 🎨 **Modern UI** - Beautiful glass-morphism design

            ---

            ## 🚀 Quick Start

            1. Download the installer for your platform
            2. Drag & drop media files
            3. Select output format
            4. Click "Convert All"

            **System Requirements**: Windows 10+ / macOS 10.15+ / Linux 64-bit

            ---

            **License**: GPL v2 / LGPL v2.1  
            **Built with**: Tauri • React • FFmpeg • Rust
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }} --bundles ${{ matrix.bundles }}

      - name: 🏷️ Rename and cleanup artifacts
        shell: bash
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          TARGET="${{ matrix.target }}"
          BUNDLE_DIR="src-tauri/target/$TARGET/release/bundle"
          
          echo "📁 Bundle directory: $BUNDLE_DIR"
          
          # Windows
          if [ "${{ matrix.platform }}" == "windows-latest" ]; then
            echo "🪟 Processing Windows artifacts..."
            
            # MSI Installer
            if [ -d "$BUNDLE_DIR/msi" ]; then
              cd "$BUNDLE_DIR/msi"
              ORIGINAL_MSI=$(ls *.msi 2>/dev/null | head -n 1)
              if [ -n "$ORIGINAL_MSI" ]; then
                mv "$ORIGINAL_MSI" "MuXolotl-Converter-${VERSION}-windows-x64-setup.msi"
                echo "✅ Renamed: $ORIGINAL_MSI → MuXolotl-Converter-${VERSION}-windows-x64-setup.msi"
              fi
              cd -
            fi
            
            # NSIS Portable
            if [ -d "$BUNDLE_DIR/nsis" ]; then
              cd "$BUNDLE_DIR/nsis"
              ORIGINAL_EXE=$(ls *.exe 2>/dev/null | head -n 1)
              if [ -n "$ORIGINAL_EXE" ]; then
                mv "$ORIGINAL_EXE" "MuXolotl-Converter-${VERSION}-windows-x64-portable.exe"
                echo "✅ Renamed: $ORIGINAL_EXE → MuXolotl-Converter-${VERSION}-windows-x64-portable.exe"
              fi
              cd -
            fi
          fi
          
          # Linux
          if [ "${{ matrix.platform }}" == "ubuntu-22.04" ]; then
            echo "🐧 Processing Linux artifacts..."
            
            if [ -d "$BUNDLE_DIR/deb" ]; then
              cd "$BUNDLE_DIR/deb"
              ORIGINAL_DEB=$(ls *.deb 2>/dev/null | head -n 1)
              if [ -n "$ORIGINAL_DEB" ]; then
                mv "$ORIGINAL_DEB" "MuXolotl-Converter-${VERSION}-linux-x64.deb"
                echo "✅ Renamed: $ORIGINAL_DEB → MuXolotl-Converter-${VERSION}-linux-x64.deb"
              fi
              cd -
            fi
          fi
          
          # macOS Intel
          if [ "${{ matrix.platform }}" == "macos-latest" ] && [ "$TARGET" == "x86_64-apple-darwin" ]; then
            echo "🍎 Processing macOS Intel artifacts..."
            
            if [ -d "$BUNDLE_DIR/dmg" ]; then
              cd "$BUNDLE_DIR/dmg"
              ORIGINAL_DMG=$(ls *.dmg 2>/dev/null | head -n 1)
              if [ -n "$ORIGINAL_DMG" ]; then
                mv "$ORIGINAL_DMG" "MuXolotl-Converter-${VERSION}-macos-intel.dmg"
                echo "✅ Renamed: $ORIGINAL_DMG → MuXolotl-Converter-${VERSION}-macos-intel.dmg"
              fi
              cd -
            fi
          fi
          
          # macOS ARM
          if [ "${{ matrix.platform }}" == "macos-latest" ] && [ "$TARGET" == "aarch64-apple-darwin" ]; then
            echo "🍎 Processing macOS Apple Silicon artifacts..."
            
            if [ -d "$BUNDLE_DIR/dmg" ]; then
              cd "$BUNDLE_DIR/dmg"
              ORIGINAL_DMG=$(ls *.dmg 2>/dev/null | head -n 1)
              if [ -n "$ORIGINAL_DMG" ]; then
                mv "$ORIGINAL_DMG" "MuXolotl-Converter-${VERSION}-macos-apple-silicon.dmg"
                echo "✅ Renamed: $ORIGINAL_DMG → MuXolotl-Converter-${VERSION}-macos-apple-silicon.dmg"
              fi
              cd -
            fi
          fi
          
          echo "✅ Artifact processing complete"

      - name: 📤 Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-setup.msi
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-windows-x64-portable.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/deb/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-linux-x64.deb
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-intel.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/MuXolotl-Converter-${{ needs.prepare.outputs.version }}-macos-apple-silicon.dmg
            ffmpeg-windows-x64.zip
            ffmpeg-linux-x64.tar.gz
            ffmpeg-macos-intel.zip
            ffmpeg-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
